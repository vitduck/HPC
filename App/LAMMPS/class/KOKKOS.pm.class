package HPC::App::LAMMPS::KOKKOS;  

use Moose;  

with 'HPC::App::LAMMPS::Package'; 

has 'opt' => ( 
    is       => 'rw', 
    isa      => 'HashRef[Str]', 
    traits   => ['Hash'],
    init_arg => undef, 
    lazy     => 1, 
    default  => sub {{}}, 
    handles  => { 
        iterate  => 'kv', 
        set_neigh         => [ set => 'neigh'         ], 
        get_neigh         => [ get => 'neigh'         ], 
        set_neigh_qeq     => [ set => 'neigh/qeq'     ], 
        get_neigh_qeq     => [ get => 'neigh/qeq'     ], 
        set_neigh_thread  => [ set => 'neigh/thread'  ], 
        get_neigh_thread  => [ get => 'neigh/thread'  ], 
        set_newton        => [ set => 'newton'        ], 
        get_newton        => [ get => 'newton'        ], 
        set_binsize       => [ set => 'binsize'       ], 
        get_binsize       => [ get => 'binsize'       ], 
        set_comm          => [ set => 'comm'          ], 
        get_comm          => [ get => 'coom'          ], 
        set_comm_exchange => [ set => 'comm/exchange' ], 
        get_comm_exchange => [ get => 'coom/exchange' ], 
        set_comm_forward  => [ set => 'comm/forward'  ], 
        get_comm_forward  => [ get => 'coom/forward'  ], 
        set_comm_reverse  => [ set => 'comm/reverse'  ], 
        get_comm_reverse  => [ get => 'coom/reverse'  ], 
        set_gpu_direct    => [ set => 'gpu/direct'    ], 
        get_gpu_direct    => [ get => 'gpu/direct'    ], 
    }, 
    clearer  => 'reset_opt'
); 

after qr/^(set|reset)_/ => sub {
    my $self = shift; 

    $self->_clear_pk
}; 

sub _build_pk { 
    my $self = shift; 
    my @opts = (); 

    push @opts, 'kokkos'; 

    for my $pair ($self->iterate) { 
        push @opts, $pair->@*; 
    }

    return join(' ', '-pk', @opts) 
} 

__PACKAGE__->meta->make_immutable;

1
